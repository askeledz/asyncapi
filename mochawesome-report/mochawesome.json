{
  "stats": {
    "suites": 2,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2024-02-02T08:13:47.054Z",
    "end": "2024-02-02T08:13:49.158Z",
    "duration": 2104,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "ca64ff1c-6dbe-4e99-89c6-e59db2e2d472",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "69d4a58b-db29-49fb-bf05-b443acf7f2a6",
          "title": "Async demo",
          "fullFile": "/Users/askeledzija/workspace/asyncapi/test/test_a.spec.js",
          "file": "/test/test_a.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should Fetch the posts by id using GET request",
              "fullTitle": "Async demo Should Fetch the posts by id using GET request",
              "timedOut": false,
              "duration": 102,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request(baseURL)\n    .get('/posts/' + postId)\n    .set(\"Accept\", \"application/json\")\n    .set(\"Content-Type\", 'application/json')\n    .then((res, err) => {\n        expect(res.statusCode).to.be.equal(200)\n        expect(res.body.title).to.contains('reprehenderit')\n        if (err) {\n            throw err;\n        }\n    });",
              "err": {},
              "uuid": "be2fead3-6a75-424f-8bf5-6b43ad7932ca",
              "parentUUID": "69d4a58b-db29-49fb-bf05-b443acf7f2a6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should successfully create a post using POST request",
              "fullTitle": "Async demo Should successfully create a post using POST request",
              "timedOut": false,
              "duration": 406,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request(baseURL)\n    .post('/posts')\n    .send(data)\n    .set(\"Accept\", \"application/json\")\n    .set(\"Content-Type\", 'application/json')\n    .then((res, err) => {\n        expect(res.statusCode).to.be.equal(201)\n        //postId = res.body.id\n        //console.log(postId)\n        if (err) {\n            throw err;\n        }\n    });",
              "err": {},
              "uuid": "5bec2bbc-47bf-4200-853c-c05c72fa1179",
              "parentUUID": "69d4a58b-db29-49fb-bf05-b443acf7f2a6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should Update the posts of the provided post id using PUT request",
              "fullTitle": "Async demo Should Update the posts of the provided post id using PUT request",
              "timedOut": false,
              "duration": 413,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request(baseURL)\n    .put('/posts/' + postId)\n    .send(updateddata)\n    .set(\"Accept\", \"application/json\")\n    .set(\"Content-Type\", 'application/json')\n  //  .set('Cookie', 'token=' + token)\n    .then((res, err) => {\n        expect(res.statusCode).to.be.equal(200)\n        expect(res.body.title).to.be.equal(updateddata.title)\n        if (err) {\n            throw err;\n        }\n    });",
              "err": {},
              "uuid": "831ecc31-0c29-4bb5-af1e-7a2da4567f6b",
              "parentUUID": "69d4a58b-db29-49fb-bf05-b443acf7f2a6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should Partial Update the title and body of the provided post id using PATCH request",
              "fullTitle": "Async demo Should Partial Update the title and body of the provided post id using PATCH request",
              "timedOut": false,
              "duration": 188,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var title = \"Andrej\"\nvar body = \"Skeledzija\"\nawait request(baseURL)\n    .patch('/posts/' + postId)\n    .send({title: title, body: body})\n    .set(\"Accept\", \"application/json\")\n    .set(\"Content-Type\", 'application/json')\n    //.set('Cookie', 'token=' + token)\n    .then((res, err) => {\n        expect(res.statusCode).to.be.equal(200)\n        expect(res.body.title).to.be.equal(title)\n        expect(res.body.body).to.be.equal(body)\n        if (err) {\n            throw err;\n        }\n    });",
              "err": {},
              "uuid": "bd85f82a-8405-40fb-82bd-7a3065e74368",
              "parentUUID": "69d4a58b-db29-49fb-bf05-b443acf7f2a6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should Delete post of the provided postId using DELETE request",
              "fullTitle": "Async demo Should Delete post of the provided postId using DELETE request",
              "timedOut": false,
              "duration": 178,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request(baseURL)\n    .delete('/posts/' + postId)\n    .set(\"Accept\", \"application/json\")\n    .set(\"Content-Type\", 'application/json')\n    //.set('Cookie', 'token=' + token)\n    .then((res, err) => {\n        expect(res.statusCode).to.be.equal(200)\n        if (err) {\n            throw err;\n        }\n    });",
              "err": {},
              "uuid": "18850a55-d130-45d9-a6b8-de1440d0b828",
              "parentUUID": "69d4a58b-db29-49fb-bf05-b443acf7f2a6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "be2fead3-6a75-424f-8bf5-6b43ad7932ca",
            "5bec2bbc-47bf-4200-853c-c05c72fa1179",
            "831ecc31-0c29-4bb5-af1e-7a2da4567f6b",
            "bd85f82a-8405-40fb-82bd-7a3065e74368",
            "18850a55-d130-45d9-a6b8-de1440d0b828"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1287,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "dae0f247-88df-4b92-aa83-e345d2cd11d8",
          "title": "Async demo",
          "fullFile": "/Users/askeledzija/workspace/asyncapi/test/test_b.spec.js",
          "file": "/test/test_b.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should Fetch the posts by id using GET request",
              "fullTitle": "Async demo Should Fetch the posts by id using GET request",
              "timedOut": false,
              "duration": 73,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request(baseURL)\n    .get('/posts/' + postId)\n    .set(\"Accept\", \"application/json\")\n    .set(\"Content-Type\", 'application/json')\n    .then((res, err) => {\n        expect(res.statusCode).to.be.equal(200)\n        expect(res.body.title).to.contains('reprehenderit')\n        if (err) {\n            throw err;\n        }\n    });",
              "err": {},
              "uuid": "e5ea0679-668e-489f-8f75-6c1cf43471cd",
              "parentUUID": "dae0f247-88df-4b92-aa83-e345d2cd11d8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should successfully create a post using POST request",
              "fullTitle": "Async demo Should successfully create a post using POST request",
              "timedOut": false,
              "duration": 178,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request(baseURL)\n    .post('/posts')\n    .send(data)\n    .set(\"Accept\", \"application/json\")\n    .set(\"Content-Type\", 'application/json')\n    .then((res, err) => {\n        expect(res.statusCode).to.be.equal(201)\n        //postId = res.body.id\n        //console.log(postId)\n        if (err) {\n            throw err;\n        }\n    });",
              "err": {},
              "uuid": "35063eb1-3e19-47ee-b91d-b327acf77a42",
              "parentUUID": "dae0f247-88df-4b92-aa83-e345d2cd11d8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should Update the posts of the provided post id using PUT request",
              "fullTitle": "Async demo Should Update the posts of the provided post id using PUT request",
              "timedOut": false,
              "duration": 184,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request(baseURL)\n    .put('/posts/' + postId)\n    .send(updateddata)\n    .set(\"Accept\", \"application/json\")\n    .set(\"Content-Type\", 'application/json')\n  //  .set('Cookie', 'token=' + token)\n    .then((res, err) => {\n        expect(res.statusCode).to.be.equal(200)\n        expect(res.body.title).to.be.equal(updateddata.title)\n        if (err) {\n            throw err;\n        }\n    });",
              "err": {},
              "uuid": "4e5ab782-b56a-438c-a9bc-9ff5b9532a05",
              "parentUUID": "dae0f247-88df-4b92-aa83-e345d2cd11d8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should Partial Update the title and body of the provided post id using PATCH request",
              "fullTitle": "Async demo Should Partial Update the title and body of the provided post id using PATCH request",
              "timedOut": false,
              "duration": 192,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var title = \"Andrej\"\nvar body = \"Skeledzija\"\nawait request(baseURL)\n    .patch('/posts/' + postId)\n    .send({title: title, body: body})\n    .set(\"Accept\", \"application/json\")\n    .set(\"Content-Type\", 'application/json')\n    //.set('Cookie', 'token=' + token)\n    .then((res, err) => {\n        expect(res.statusCode).to.be.equal(200)\n        expect(res.body.title).to.be.equal(title)\n        expect(res.body.body).to.be.equal(body)\n        if (err) {\n            throw err;\n        }\n    });",
              "err": {},
              "uuid": "e6e37dab-8a85-434b-b690-e5cfac5bac60",
              "parentUUID": "dae0f247-88df-4b92-aa83-e345d2cd11d8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should Delete post of the provided postId using DELETE request",
              "fullTitle": "Async demo Should Delete post of the provided postId using DELETE request",
              "timedOut": false,
              "duration": 179,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await request(baseURL)\n    .delete('/posts/' + postId)\n    .set(\"Accept\", \"application/json\")\n    .set(\"Content-Type\", 'application/json')\n    //.set('Cookie', 'token=' + token)\n    .then((res, err) => {\n        expect(res.statusCode).to.be.equal(200)\n        if (err) {\n            throw err;\n        }\n    });",
              "err": {},
              "uuid": "11ab43c7-b554-4f05-90ca-d2dbb7c10b38",
              "parentUUID": "dae0f247-88df-4b92-aa83-e345d2cd11d8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e5ea0679-668e-489f-8f75-6c1cf43471cd",
            "35063eb1-3e19-47ee-b91d-b327acf77a42",
            "4e5ab782-b56a-438c-a9bc-9ff5b9532a05",
            "e6e37dab-8a85-434b-b690-e5cfac5bac60",
            "11ab43c7-b554-4f05-90ca-d2dbb7c10b38"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 806,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}